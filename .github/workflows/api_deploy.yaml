name: Deploy Api

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    paths:
      - "api/**"
      - ".github/workflows/api_deploy.yaml"
      - ".github/workflows/api_verify_and_test.yaml"
      - ".github/workflows/fluttercon_data_source_verify_and_test.yaml"
      - ".github/workflows/fluttercon_shared_models_verify_and_test.yaml"
      - ".github/workflows/talks_repository_verify_and_test.yaml"
      - ".github/workflows/user_repository_verify_and_test.yaml"
    branches:
      - main
      - feat/api-deploy #TEMP DEBUG

jobs:  
  deploy:
    runs-on: ubuntu-latest

    steps:      
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install Amplify CLI
        run: |
          npm install -g @aws-amplify/cli

      - name: Install NPM Dependencies
        run: |
          cd api
          npm install

      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy Amplify Resources
        run: |
          cd api
          export CI=1
          npm ci
          npx ampx pipeline-deploy --branch ${{ github.ref_name }} --app-id ${{ secrets.AMPLIFY_APP_ID }}

      - name: Generate Amplify Outputs
        run: |
          cd api
          npx ampx generate outputs --format dart --out-dir lib --branch ${{ github.ref_name }} --app-id ${{ secrets.AMPLIFY_APP_ID }}

      - name: Install Dart SDK
        uses: dart-lang/setup-dart@v1.6.4
        
      - name: Install Dart Frog
        run: dart pub global activate dart_frog_cli

      - name: Install Very Good CLI
        run: dart pub global activate very_good_cli

      - name: Get Dependencies
        run: cd api && very_good packages get -r

      - name: Build API
        run: cd api && dart_frog build     

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true        

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: fluttercon_usa_2024/api-${{ github.ref_name}}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          if ! aws ecr describe-repositories --repository-names $ECR_REPOSITORY 2>/dev/null; then
            echo "ECR repository does not exist. Creating it..."
            aws ecr create-repository --repository-name $ECR_REPOSITORY --image-scanning-configuration scanOnPush=true --encryption-configuration encryptionType=AES256
          else
            echo "ECR repository already exists."
          fi
          cd api
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . 
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"  

      - name: Deploy to App Runner
        id: deploy-apprunner
        uses: awslabs/amazon-app-runner-deploy@main        
        with:
          service: fluttercon_usa_2024_api-${{ github.ref_name }}
          image: ${{ steps.build-image.outputs.image }}          
          access-role-arn: ${{ secrets.ROLE_ARN }}
          runtime: NODEJS_12          
          region: ${{ secrets.AWS_REGION }}
          cpu : 1
          memory : 2
          port: 8080
          wait-for-service-stability-seconds: 600  
      
      # - name: Deploy to App Runner
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: fluttercon_usa_2024/api-${{ github.ref_name }}
      #     IMAGE_TAG: ${{ github.sha }}
      #     SERVICE_NAME: fluttercon_usa_api-${{ github.ref_name }}
      #   run: |
      #     # Check if service exists and create or update accordingly
      #     SERVICE_ARN=$(aws apprunner list-services --service-name-filter $SERVICE_NAME --query 'ServiceSummaryList[0].ServiceArn' --output text)
      #     if [ -z "$SERVICE_ARN" ]; then
      #       aws apprunner create-service --service-name $SERVICE_NAME \
      #         --source-configuration '{
      #           "ImageRepository": {
      #             "ImageIdentifier": "'$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG'",
      #             "ImageRepositoryType": "ECR",
      #             "ImageConfiguration": {
      #               "Port": "8080"
      #             }
      #           }
      #         }'
      #     else
      #       aws apprunner update-service --service-arn $SERVICE_ARN \
      #         --source-configuration '{
      #           "ImageRepository": {
      #             "ImageIdentifier": "'$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG'",
      #             "ImageRepositoryType": "ECR",
      #             "ImageConfiguration": {
      #               "Port": "8080"
      #             }
      #           }
      #         }'
      #     fi
      
      - name: Get App Runner URL
        id: get-app-runner-url
        run: |
            SERVICE_ARN=$(aws apprunner list-services --service-name-filter $SERVICE_NAME --query 'ServiceSummaryList[0].ServiceArn' --output text)
            SERVICE_URL=$(aws apprunner describe-service --service-arn $SERVICE_ARN --query 'Service.ServiceUrl' --output text)
            echo "API_URL=https://$SERVICE_URL" >> $GITHUB_ENV